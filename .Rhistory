# CG Q16 #
### TYPE YOUR CODE BELOW ###
model <- lm(ACTUAL ~ PSAT, data = apdata_clean)
predicted_values <- predict(model, newdata = apdata_clean)
apdata_clean_ACTUAL <- predicted_values
Q16 <- apdata_clean[, c("PSAT", "Predicted_ACTUAL")]
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q16 #
### TYPE YOUR CODE BELOW ###
#model <- lm(ACTUAL ~ PSAT, data = apdata_clean)
predicted_values <- predict(model, newdata = apdata_clean)
apdata_clean_ACTUAL <- predicted_values
Q16 <- apdata_clean[, c("PSAT", "Predicted_ACTUAL")]
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q16 #
### TYPE YOUR CODE BELOW ###
model <- lm(ACTUAL ~ PSAT, data = apdata_clean)
predicted_values <- predict(model, newdata = apdata_clean)
apdata_clean$predicted_ACTUAL <- predicted_values
Q16 <- apdata_clean[, c("PSAT", "predicted_ACTUAL")]
### VIEW OUTPUT ###
Q16
### It's always a good idea when working in RStudio to start with a clean environment.
### Clear objects from the environment memory that may be leftover from previous versions of your code or other assignments by running the following line:
rm(list = ls())
### Load Libraries
# There are no  libraries needed for this assignment!
# Use only base R functionality.
### Run this code block after you have completed Step 3 above (uploading the APprediction.csv)
# Read CSV
apdata <- read.csv("APprediction.csv", stringsAsFactors = TRUE)
# Ensure that ID variable is a factor, not a character
apdata$ID <- as.factor(apdata$ID)
### Run this code block after you have completed Step 3 above (uploading the APprediction.csv)
# Read CSV
apdata <- read.csv("APprediction.csv", stringsAsFactors = TRUE)
# Ensure that ID variable is a factor, not a character
apdata$ID <- as.factor(apdata$ID)
### Run this code block after you have completed Step 3 above (uploading the APprediction.csv)
# Read CSV
apdata <- read.csv("APprediction.csv", stringsAsFactors = TRUE)
# Ensure that ID variable is a factor, not a character
apdata$ID <- as.factor(apdata$ID)
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q1 #
### TYPE YOUR CODE BELOW ###
w_math <- 1.08898
apdata$weighted_GPA <- apdata$MathGPA * w_math
Q1 <- mean(apdata$weighted_GPA, na.rm = TRUE)
### VIEW OUTPUT ###
Q1
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q1 #
### TYPE YOUR CODE BELOW ###
w_math <- 1.08898
apdata$weighted_GPA <- apdata$MathGPA * w_math
Q1 <- mean(apdata$weighted_GPA, na.rm = TRUE)
### VIEW OUTPUT ###
Q1
### Run this code block after you have completed Step 3 above (uploading the APprediction.csv)
# Read CSV
apdata <- read.csv("APprediction.csv", stringsAsFactors = TRUE)
# Ensure that ID variable is a factor, not a character
apdata$ID <- as.factor(apdata$ID)
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q17 #
### TYPE YOUR CODE BELOW ###
model <- lm(ACTUAL ~ PSAT, data = apdata_clean)
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q17 #
### TYPE YOUR CODE BELOW ###
model <- lm(ACTUAL ~ PSAT, data = apdata_clean)
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q17 #
### TYPE YOUR CODE BELOW ###
model <- lm(ACTUAL ~ PSAT, data = apdata_clean)
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q17 #
### TYPE YOUR CODE BELOW ###
model <- lm(ACTUAL ~ PSAT, data = apdata_clean)
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG apdata_clean #
### TYPE YOUR CODE BELOW ###
#apdata_clean <- apdata_valid_apscores[apdata_valid_apscores$PSAT > 300, c("PSAT","ACTUAL")]
apdata_clean <- apdata_valid_apscores[apdata_valid_apscores$PSAT > 300 &
apdata_valid_apscores$ACTUAL >= 1 &
apdata_valid_apscores$ACTUAL <= 5 &
!is.na(apdata_valid_apscores$PSAT), ]
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG apdata_valid_apscores #
### TYPE YOUR CODE BELOW ###
apdata_valid_apscores <- apdata[!is.na(apdata$ACTUAL) & !is.na(apdata$PSAT) & apdata$ACTUAL >= 1, c("PSAT", "ACTUAL")]
### VIEW OUTPUT ###
apdata_valid_apscores
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG apdata_clean #
### TYPE YOUR CODE BELOW ###
#apdata_clean <- apdata_valid_apscores[apdata_valid_apscores$PSAT > 300, c("PSAT","ACTUAL")]
apdata_clean <- apdata_valid_apscores[apdata_valid_apscores$PSAT > 300 &
apdata_valid_apscores$ACTUAL >= 1 &
apdata_valid_apscores$ACTUAL <= 5 &
!is.na(apdata_valid_apscores$PSAT), ]
### VIEW OUTPUT ###
apdata_clean
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q17 #
### TYPE YOUR CODE BELOW ###
model <- lm(ACTUAL ~ PSAT, data = apdata_clean)
Q17 <- summary(model)
Q17
### VIEW OUTPUT ###
Q17[c(6,8)]
# 6: gives the value of sigma (aka StDev of residuals)
# 8: gives the value of r-squared
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q17 #
### TYPE YOUR CODE BELOW ###
model <- lm(ACTUAL ~ PSAT, data = apdata_clean)
Q17 <- summary(model)
### VIEW OUTPUT ###
Q17[c(6,8)]
# 6: gives the value of sigma (aka StDev of residuals)
# 8: gives the value of r-squared
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q18 #
### TYPE YOUR CODE BELOW ###
Q18 <- cor(apdata_clean$ACTUAL, apdata_clean$PSAT)
### VIEW OUTPUT ###
Q18
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q18 #
### TYPE YOUR CODE BELOW ###
Q18 <- cor(apdata_clean$ACTUAL, apdata_clean$PSAT, use = "complete.obs")
### VIEW OUTPUT ###
Q18
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q18 #
### TYPE YOUR CODE BELOW ###
Q18 <- cor(apdata_clean$ACTUAL, apdata_clean$PSAT)
### VIEW OUTPUT ###
Q18
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q19 #
### TYPE YOUR CODE BELOW ###
if (Q18 >= 0.7){
Q19 <- "strong"
} else if (cor >= 0.4){
Q19 <- "moderate"
} else {
Q19 <- "weak"
}
### VIEW OUTPUT ###
Q19
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q1 #
### TYPE YOUR CODE BELOW ###
Q1 <- mean(apdata$wGPA, na.rm = TRUE)
### VIEW OUTPUT ###
Q1
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q2 #
### TYPE YOUR CODE BELOW ###
Q2 <- median(apdata$wGPA, na.rm = TRUE)
### VIEW OUTPUT ###
Q2
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q3 #
### TYPE YOUR CODE BELOW ###
Q3 <- min(apdata$wGPA, na.rm = TRUE)
### VIEW OUTPUT ###
Q3
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q4 #
### TYPE YOUR CODE BELOW ###
Q4 <- max(apdata$wGPA, na.rm = TRUE)
### VIEW OUTPUT ###
Q4
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q5 #
### TYPE YOUR CODE BELOW ###
Q5 <- range(apdata$wGPA, na.rm = TRUE)
### VIEW OUTPUT ###
Q5
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q5 #
### TYPE YOUR CODE BELOW ###
Q5 <- range(apdata$wGPA, na.rm = TRUE)
### VIEW OUTPUT ###
Q5
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q5 #
### TYPE YOUR CODE BELOW ###
Q5 <- range(apdata$wGPA, na.rm = TRUE)
### VIEW OUTPUT ###
Q5
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q5 #
### TYPE YOUR CODE BELOW ###
Q5 <- range(apdata$wGPA)
### VIEW OUTPUT ###
Q5
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q5 #
### TYPE YOUR CODE BELOW ###
Q5 <- range(apdata$wGPA, na.rm = TRUE)
### VIEW OUTPUT ###
Q5
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q5 #
### TYPE YOUR CODE BELOW ###
Q5 <- range(apdata$wGPA, na.rm = TRUE)
### VIEW OUTPUT ###
Q5
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q5 #
### TYPE YOUR CODE BELOW ###
Q5 <- range(apdata$wGPA, na.rm = TRUE)
### VIEW OUTPUT ###
Q5
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q6 #
### TYPE YOUR CODE BELOW ###
Q6 <- var(apdata$wGPA, na.rm = TRUE)
### VIEW OUTPUT ###
Q6
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q7 #
### TYPE YOUR CODE BELOW ###
Q7 <- sd(apdata$wGPA, na.rm = TRUE)
### VIEW OUTPUT ###
Q7
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q8 #
### TYPE YOUR CODE BELOW ###
Q8 <- summary(apdata$wGPA, na.rm = TRUE)
### VIEW OUTPUT ###
Q8
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q9 #
### TYPE YOUR CODE BELOW ###
student_200 <- apdata[200,]
Q9 <- student_200
### VIEW OUTPUT ###
Q9
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q9 #
### TYPE YOUR CODE BELOW ###
student_200 <- apdata[apdata$wGPA, 200,]
Q9 <- student_200
### VIEW OUTPUT ###
Q9
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q9 #
### TYPE YOUR CODE BELOW ###
student_200 <- apdata$wGPA[200]
Q9 <- student_200
### VIEW OUTPUT ###
Q9
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q10 #
### TYPE YOUR CODE BELOW ###
Q10 <- (Q9- Q1)/Q6
### VIEW OUTPUT ###
Q10
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q10 #
### TYPE YOUR CODE BELOW ###
Q10 <- (Q9- Q1)/Q6
### VIEW OUTPUT ###
Q10
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q10 #
### TYPE YOUR CODE BELOW ###
Q10 <- (Q9- Q1)/Q6
### VIEW OUTPUT ###
Q10
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q10 #
### TYPE YOUR CODE BELOW ###
A <- mean(apdata$wGPA, na.rm = TRUE)
B <- student_200
C <- var(apdata$wGPA, na.rm = TRUE)
Q10 < (B - A)/ C
### VIEW OUTPUT ###
Q10
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q10 #
### TYPE YOUR CODE BELOW ###
A <- mean(apdata$wGPA, na.rm = TRUE)
B <- student_200
C <- var(apdata$wGPA, na.rm = TRUE)
Q10 < (B - A)/ C
### VIEW OUTPUT ###
Q10
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q10 #
### TYPE YOUR CODE BELOW ###
A <- mean(apdata$wGPA, na.rm = TRUE)
B <- student_200
C <- var(apdata$wGPA, na.rm = TRUE)
Q10 <- (B - A)/ C
### VIEW OUTPUT ###
Q10
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q10 #
### TYPE YOUR CODE BELOW ###
A <- mean(apdata$wGPA, na.rm = TRUE)
B <- student_200
C <- sd(apdata$wGPA, na.rm = TRUE)
Q10 <- (B - A)/ C
### VIEW OUTPUT ###
Q10
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q11 #
### TYPE YOUR CODE BELOW ###
Q11 <- quantile(apdata$wGPA, probs = c(0.25,0.5,0.75), na.rm = TRUE)
### VIEW OUTPUT ###
Q11
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q5 #
### TYPE YOUR CODE BELOW ###
Q5 <- max(apdata$wGPA, na.rm = TRUE) - min(apdata$wGPA, na.rm = TRUE)
### VIEW OUTPUT ###
Q5
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q19 #
### TYPE YOUR CODE BELOW ###
c <- cor(apdata_clean$ACTUAL, apdata_clean$PSAT)
if (c >= 0.7){
Q19 <- "strong"
} else if (c >= 0.4){
Q19 <- "moderate"
} else {
Q19 <- "weak"
}
### VIEW OUTPUT ###
Q19
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q16 #
### TYPE YOUR CODE BELOW ###
model <- lm(ACTUAL ~ PSAT, data = apdata_clean)
Q16 <- predict(model, newdata = apdata_clean[1,])
### VIEW OUTPUT ###
Q16
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q10 #
### TYPE YOUR CODE BELOW ###
A <- mean(apdata$wGPA, na.rm = TRUE)
B <- student_200
C <- sd(apdata$wGPA, na.rm = TRUE)
Q10 <- (B - A)/ C
### VIEW OUTPUT ###
Q10
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q10 #
### TYPE YOUR CODE BELOW ###
A <- mean(apdata$wGPA, na.rm = TRUE)
B <- apdata$wGPA[200]
C <- sd(apdata$wGPA, na.rm = TRUE)
Q10 <- (B - A)/ C
### VIEW OUTPUT ###
Q10
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q16 #
### TYPE YOUR CODE BELOW ###
model <- lm(ACTUAL ~ PSAT, data = apdata_clean)
Q16 <- predict(model, newdata = apdata_clean[1,], drop = FALSE)
### VIEW OUTPUT ###
Q16
### Do not change and do not delete the comment below. It is required for Code Grade to run properly.
# CG Q16 #
### TYPE YOUR CODE BELOW ###
model <- lm(ACTUAL ~ PSAT, data = apdata_clean)
Q16 <- predict(model, newdata = apdata_clean[1,, drop = FALSE])
### VIEW OUTPUT ###
Q16
colnames(mydata)
mydata <- read.csv("mortgagedefault.Rmd")
mydata <- read.csv("mortgagedefault.Rmd")
mydata <- read.csv("mortgagedefault.Rmd")
customer_id,Age,marital_status,annual_income,mortgage_amount,payments_per_year,total_amount_paid,default_status
mydata <- read.csv("mortgagedefault.Rmd")
head(mydata)
mydata <- read.csv("mortgagedefault.Rmd")
mydata <- read.csv("mortgagedefault.Rmd")
mydata <- read.csv("mortgagedefault.Rmd")
mydata <- read.csv("mortgagedefault.Rmd")
mydata <- read.csv("mortgagedefault.Rmd")
getwd()
mydata <- read.csv("mortgagedefault.Rmd")
getwd()
setwd("C:/Users/RAJKUMAR/Documents")
getwd()
setwd("C:/Users/RAJKUMAR/Documents")
mydata <- read.csv("mortgagedefault.Rmd")
mydata <- read.csv("mortgagedefault.Rmd")
mydata <- read.csv("mortgagedefault.Rmd")
getwd()
setwd("C:/Users/RAJKUMAR/Documents")
mydata <- read.csv("mortgagedefault.Rmd")
getwd()
setwd("C:/Users/RAJKUMAR/Documents")
mydata <- read.csv("mortgagedefault.Rmd")
getwd()
setwd("C:/Users/RAJKUMAR/Documents")
mydata <- read.csv("mortgagedefault.Rmd")
mydata <- read.csv("C:/Users/RAJKUMAR/Documents")
mydata <- read.csv("C:/Users/RAJKUMAR/Documents")
mydata <- read.csv("C:/Users/RAJKUMAR/Documents/mortgagedefault.Rmd")
mydata <- read.csv("C:/Users/RAJKUMAR/Documents/mortgagedefault.Rmd")
list.files("C:/Users/RAJKUMAR/Documents")
mydata <- read.csv("mortgagedefault.Rmd")
mydata <- read.csv("C:/Users/RAJKUMAR/Documents/mortgagedefault.Rmd")
mydata <- read.csv("mortgagedefault.Rmd")
mydata <- read.csv("mortgagedefault.Rmd")
customer_id,Age,marital_status,annual_income,mortgage_amount,payments_per_year,total_amount_paid,default_status
customer_id,Age,marital_status,annual_income,mortgage_amount,payments_per_year,total_amount_paid,default_status
mydata <- read.csv("mortgagedefault.Rmd")
mydata <- read.csv("mortgagedefault.Rmd")
mydata <- read.csv("mortgagedefault.Rmd")
customer_id,Age,marital_status,annual_income,mortgage_amount,payments_per_year,total_amount_paid,default_status
customer_id,Age,marital_status,annual_income,mortgage_amount,payments_per_year,total_amount_paid,default_status
mydata <- read.csv("mortgagedefault.Rmd")
mydata <- read.csv("mortgagedefault.Rmd")
mydata <- ("mortgagedefault.Rmd")
head(mydata)
summary(mydata)
colnames(mydata)
mydata <- mortgagedefault.Rmd
mydata <- mortgagedefault.Rmd
mydata <- read.csv("mortgagedefault.Rmd")
mydata <- read.csv("mortgagedefault.Rmd")
Student <- APprediction
Student <- APprediction
Student <- read.csv("APprediction.Rmd)
Student <- read.csv("APprediction.Rmd")
Student <- read.csv("APprediction.csv")
Student <- read.csv("APprediction.csv", stringsAsFactors = TRUE)
rm(list = ls())
Student <- read.csv("APprediction.csv", stringsAsFactors = TRUE)
Student <- read.csv("APprediction.csv", stringsAsFactors = TRUE)
Student <- read.csv("APprediction.csv", stringsAsFactors = TRUE)
setwd("C:\Users\RAJKUMAR\Documents\R-Project")
getwd()
Student <- read.csv("APprediction.csv", stringsAsFactors = TRUE)
setwd("C:\Users\RAJKUMAR\Documents\R-Project")
setwd("C:/Users/RAJKUMAR/Documents/R-Project")
getwd()
Student <- read.csv("APprediction.csv", stringsAsFactors = TRUE)
student <- read.csv("APprediction.csv", stringsAsFactors = TRUE)
head()
head(student)
head(student,5)
student <- read.csv("APprediction.csv")
head(student,5)
student <- read.csv("APprediction.csv", stringsAsFactors = TRUE)
head(student,5)
summary(student)
mean(student)
mean(student$wGPA)
student <- sum(is.na(student))
mean(student$wGPA)
student <- na.omit(student)
summary(student)
student <- sum(student)
mean(student$wGPA)
mean(student$wGPA, na.rm = TRUE)
mean<- mean(student$wGPA, na.rm = TRUE)
mean <- mean(student$wGPA, na.rm = TRUE)
summary(student)
student <- na.omit()
student <- na.omit(student)
summary(student)
summary(student)
column_means <- apply(student, 2, mean, na.rm = TRUE)
column_means <- colMeans(student, na.rm = TRUE)
mean(student$wGPA, na.rm = TRUE)
wGPA_mean <- mean(student$wGPA, na.rm = TRUE)
wGPA_mean <- mean(student$wGPA, na.rm = TRUE)
class(student)
student <- read.csv("APprediction.csv", stringsAsFactors = TRUE)
wGPA_mean <- mean(student$wGPA, na.rm = TRUE)
wGPA_mean
wGPA_mean <- mean(student$wGPA, na.rm = TRUE)
mean(student$wGPA, na.rm = TRUE)
mean(student, na.rm = TRUE)
wGPA_mean <- mean(student$wGPA, na.rm = TRUE)
wGPA_mean
Mean_wGPA <- mean(student$wGPA, na.rm = TRUE)
wGPA_mean <- mean(student$wGPA, na.rm = TRUE)
wGPA_mean
wGPA_median <- median(student$wGPA, na.rm = TRUE)
wGPA_median <- median(student$wGPA, na.rm = TRUE)
wGPA_median
wGPA_mode<-mode(student$wGPA, na.rm = TRUE)
wGPA_mode <- mode(student$wGPA, na.rm = TRUE)
wGPA_mode <- mode(student$wGPA, na.rm = TRUE)
wGPA_median <- median(student$wGPA, na.rm = TRUE)
wGPA_median
wGPA_mode <- mode(student$wGPA, na.rm = TRUE)
wGPA_mode <- mode(student$wGPA)
wGPA_mode
wGPA_mode <- get_mode(student$wGPA)
summary(uGPA)
summary(uGPA)
summary(wGPA)
summary(student$uGPA)
summary(student$uGPA)
sd(student$MathGPA, na.rm = TRUE)
table(student$MathGPA, na.rm = TRUE)
table(student$PSAT, na.rm = TRUE)
table(na.omit(student$PSAT))
